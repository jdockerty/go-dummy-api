# Using the latest golang Docker image within the GitLab runner.
image: golang:latest

variables:
  REPO_NAME: gitlab.com/jdockerty/go-mock-api

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

# Define the 3 stages of the pipeline
stages:
  - test
  - build
  - deploy


# Naming is arbitrary, 'format' defines the test stage for formatting, vetting (finding useless code and suspicious constructs
# through examining source code), and running the tests defined within the _test.go file(s).
format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

# Build the static binary.
compile:
  stage: build
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/mock-api
  # The artifact is the output of the build, the static binary file.
  artifacts:
    paths:
      - mock-api


# Deploy is unused at present. Stages which are not explicitly outlined with jobs will not be run.